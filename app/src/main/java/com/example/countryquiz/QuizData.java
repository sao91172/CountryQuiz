package com.example.countryquiz;

import static android.content.ContentValues.TAG;

import android.content.ContentValues;
import android.content.Context;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.DatabaseUtils;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.opencsv.CSVReader;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

/**
 * This class is facilitates storing and restoring Quizzes stored.
 */
public class QuizData {
    //DBHelper
    //QuizData
    //the actualpart of the quiz
    //swipeadapter
    //figuring out how to read the CSV file
    //connect everything in the XML file
    //coursor.getColumnIndex fix
    public static final String DEBUG_TAG = "QuizData";

    // this is a reference to our database; it is used later to run SQL commands
    public SQLiteDatabase db;
    public CountriesDBHelper countriesDBHelper;


    private ArrayList<Quiz> quiz;

    List<Country> countriesArray;


    private static final String[] allCountriesTableColumns = {
            CountriesDBHelper.COUNTRIES_COLUMN_ID,
            CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY,
            CountriesDBHelper.COUNTRIES_COLUMN_CONTINENT
    };
    private static final String[] allQuizzesTableColumns = {
            CountriesDBHelper.QUIZZES_COLUMN_QUIZ_ID,
            CountriesDBHelper.QUIZZES_COLUMN_QUIZ_DATE,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION1,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION2,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION3,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION4,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION5,
            CountriesDBHelper.QUIZZES_COLUMN_QUESTION6,
            CountriesDBHelper.QUIZZES_COLUMN_RESULT
    };

    public QuizData(Context context) {
        this.countriesDBHelper = CountriesDBHelper.getInstance(context);
    }

    // Open the database
    public void open() {
        db = countriesDBHelper.getWritableDatabase();
        Log.d(DEBUG_TAG, "QuizData: db open");
    }

    // Close the database
    public void close() {
        if (countriesDBHelper != null) {
            countriesDBHelper.close();
            Log.d(DEBUG_TAG, "QuizData: db closed");
        }
    }

    public boolean isDBOpen() {
        return db.isOpen();
    }

    public long numOfRows() {
        db = countriesDBHelper.getReadableDatabase();
        long count = DatabaseUtils.queryNumEntries(db, "quiz");
        db.close();
        return count;
    }

    /**
     * Read in CSV file and store it into the countries table columns
     *
     * @param res
     */
    public void storeCountries(Resources res) {
        Cursor cursor = null;

        try {
            cursor = db.query(CountriesDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
                    null, null, null, null, null);

            //put selected country into the List
            if (cursor.getCount() <= 0) {
                Log.d(DEBUG_TAG, "CountryQuizData: inserting CSV data");
                InputStream in_s = res.openRawResource(R.raw.country_continent);
//                InputStream in_s =  context.getAssets().open("country_continent.csv");

                //read the CSV data
                CSVReader reader = new CSVReader(new InputStreamReader(in_s));
                String[] nextLine;
                while ((nextLine = reader.readNext()) != null) {
                    ContentValues values = new ContentValues();
                    values.put(CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY, nextLine[1]);
                    values.put(CountriesDBHelper.COUNTRIES_COLUMN_CONTINENT, nextLine[2]);

                    //Insert the new row into the database table; the id (primary key) will be
                    //automatically generated by the database system
                    long id = db.insert(CountriesDBHelper.TABLE_COUNTRIES, null, values);
                    db.close();
                }
                reader.close();
                in_s.close();
            } else {
                Log.d(DEBUG_TAG, "CountryQuizData: database has been initialized already");
            }
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
    }

    /**
     * Storing the quiz into the quiz table to pull the questions from it
     *
     * @param quiz
     */
    public Quiz storeQuiz(Quiz quiz) {
        ContentValues values = new ContentValues();
        values.put(CountriesDBHelper.QUIZZES_COLUMN_QUIZ_DATE, quiz.getDate());
        values.put(CountriesDBHelper.QUIZZES_COLUMN_RESULT, quiz.getResult());
        List<String> questions = quiz.getQuestions();
        int numQuestionsAvailable = questions.size();
        if (numQuestionsAvailable > 0 && questions.get(0) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION1, questions.get(0));
        }
        if (numQuestionsAvailable > 1 && questions.get(1) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION2, questions.get(1));
        }
        if (numQuestionsAvailable > 2 && questions.get(2) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION3, questions.get(2));
        }
        if (numQuestionsAvailable > 3 && questions.get(3) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION4, questions.get(3));
        }
        if (numQuestionsAvailable > 4 && questions.get(4) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION5, questions.get(4));
        }
        if (numQuestionsAvailable > 5 && questions.get(5) != null) {
            values.put(CountriesDBHelper.QUIZZES_COLUMN_QUESTION6, questions.get(5));
        }

        //Insert the new row into the database table; the id (primary key) will be
        //automatically generated by the database system
        long id = db.insert(CountriesDBHelper.TABLE_QUIZZES, null, values);
        Log.d(DEBUG_TAG, "CountryQuizData: New Quiz ID#" + id + " has been created.");

        //store the id in the Country instance, as it is now persistent
        quiz.setId(id);

        return quiz;
    }

    /**
     * Get the countries for the quiz and return them as a list
     */
    public  List<Country> retrieveCountriesForQuiz() {
//    public ArrayList<ArrayList<Country>> retrieveCountriesForQuiz() {
        ArrayList<Country> countriesForQuiz = new ArrayList<>();
        ArrayList<Integer> randomIntegers = new ArrayList<>();
        open();
        Cursor cursor = null;
        long id = 0;
        String country = "";
        String continent = "";

//randomization
        while (countriesForQuiz.size() != 6) {
            Random rand = new Random();
            int randomInt = rand.nextInt(195) + 1;

            if (randomIntegers.contains(randomInt)) {
                continue;
            }
            randomIntegers.add(randomInt);

            String selection = CountriesDBHelper.COUNTRIES_COLUMN_ID + " = ?";
            String[] selectionArgs = new String[]{
                    randomInt + ""
            };

            try {
                //Execute the select query and get the Cursor to iterate over the retrieved rows
                cursor = db.query(CountriesDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
                        selection, selectionArgs, null, null, null);



                //put selected country into the List
                if (cursor != null && cursor.getCount() > 0) {
                    while (cursor.moveToNext()) {
                        //get all attribute values of this country
//                        long id = cursor.getLong(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_ID));
                        int column = cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_ID);
                        id = cursor.getLong(column);
//                        String country = cursor.getString(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY));
                        int string1 = cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY);
                        country = cursor.getString(string1);

//                        String continent = cursor.getString(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_CONTINENT));
                        int string2 = cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_CONTINENT);
                        continent = cursor.getString(string2);

                        //create a new country object and set its state to the retrieved values
                        Country countryObject = new Country(country, continent);
                        countryObject.setId(id);
                        //add it to the list
                        countriesForQuiz.add(countryObject);
                        Log.d(DEBUG_TAG, "Retrieved Countries: " + countryObject);
                    }
                }
            } catch (Exception e) {
                Log.d(DEBUG_TAG, "Exception caught: " + e);
            } finally {
//                cursor.close();
//                we should close the cursor
                if (cursor != null) {
                    cursor.close();
                }
            }
        }
        close();
        return countriesArray = countriesForQuiz;
    }


//    public List<Country> retrieveAllCountries() {
//        ArrayList<Country> countries = new ArrayList<>();
//        Cursor cursor = null;
//
//        try {
//            //Execute the select query and get the Cursor to iterate over the retrieved rows
//            cursor = db.query(CountriesDBHelper.TABLE_COUNTRIES, allCountriesTableColumns,
//                    null, null, null, null, null);
//
//            //collect all countries into a List
//            if (cursor.getCount() > 0) {
//                while (cursor.moveToNext()) {
//                    //get all attribute values of this country
//                    long id = cursor.getLong(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_ID));
//                    String country = cursor.getString(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY));
//                    String continent = cursor.getString(cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_CONTINENT));
//
//                    //create a new country object and set its state to the retrieved values
//                    Country countryObject = new Country(country, continent);
//                    countryObject.setId(id);
//                    //add it to the list
//                    countries.add(countryObject);
//                    Log.d(DEBUG_TAG, "Retrieved Countries: " + countryObject);
//                }
//            }
//            Log.d(DEBUG_TAG, "Number of records from DB: " + cursor.getCount());
//        } catch (Exception e) {
//            Log.d(DEBUG_TAG, "Exception caught: " + e);
//        } finally {
//            //we should close the cursor
//            if (cursor != null) {
//                cursor.close();
//            }
//        }
//        //return a list of retrieved countries
//        return countries;
//    }

    public ArrayList<Quiz> retrieveAllQuizzes() {
        ArrayList<Quiz> quizzes = new ArrayList<>();
        open();
        Cursor cursor = null;
        long id = 0;
        String date = "";
        int result = 0;
        try {

            //Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query(CountriesDBHelper.TABLE_QUIZZES, allQuizzesTableColumns,
                    null, null, null, null, null);

            //collect all countries into a List
            if (cursor != null && cursor.getCount() > 0) {
                while (cursor.moveToNext()) {
                    //get all attribute values of this country
//                    long id = cursor.getLong(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUIZ_ID));
                    int column = cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_ID);
                    id = cursor.getLong(column);
//                    String date = cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUIZ_DATE));
                    int string1 = cursor.getColumnIndex(CountriesDBHelper.COUNTRIES_COLUMN_COUNTRY);
                    date = cursor.getString(string1);
//                    int result = cursor.getInt(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_RESULT));
                    int col = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_RESULT);
                    result = cursor.getInt(column);
                    int quest1Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION1);
                    String quest1 = cursor.getString(quest1Int);
                    int quest2Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION2);
                    String quest2 = cursor.getString(quest2Int);
                    int quest3Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION3);
                    String quest3 = cursor.getString(quest3Int);
                    int quest4Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION4);
                    String quest4 = cursor.getString(quest4Int);
                    int quest5Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION5);
                    String quest5 = cursor.getString(quest5Int);
                    int quest6Int = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION6);
                    String quest6 = cursor.getString(quest6Int);

                    List<String> questions = new ArrayList<>();
                    questions.add(quest1);
                    questions.add(quest2);
                    questions.add(quest3);
                    questions.add(quest4);
                    questions.add(quest5);
                    questions.add(quest6);
                    //                   questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION1)));
//                    questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION2)));
//                    questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION3)));
//                    questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION4)));
//                    questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION5)));
//                    questions.add(cursor.getString(cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUESTION6)));

                    //create a new country object and set its state to the retrieved values
                    Quiz quizObject = new Quiz(date, questions, result);
                    quizObject.setId(id);
                    //add it to the list
                    quizzes.add(quizObject);
                    Log.d(DEBUG_TAG, "Retrieved Countries: " + quizObject);
                }
            }
            Log.d(DEBUG_TAG, "Number of records from DB: " + cursor.getCount());
        }
        catch(Exception e) {
            Log.d(DEBUG_TAG, "Exception caught: " + e);
        }
        finally{
            //we should close the cursor
            if(cursor != null) {
                cursor.close();
            }
        }
        //return a list of retrieved quizzes
        return quizzes;
    }

}


//    /**
//     * gets 6 random quiz rows to input into the quiz questions fragment
//     * @return
//     */
//    public List<Quiz> getQuiz() {
//
//        List<Quiz> quizzes = new ArrayList<>();
//        Cursor cursor = null;
//        int columnIndex;
//        this.open();
//
//
//        try {
//            // Execute the select query and get the Cursor to iterate over the retrieved rows
//            cursor = db.query(countriesDBHelper.TABLE_QUIZ, allColumns,
//                    null, null, null, null, null);
//
//            // collect all job leads into a List
//            if (cursor != null && cursor.getCount() > 0) {
//
//                Random r = new Random();
//                int [] picked = new int[6];
//                boolean distinct;
//                for (int i = 0; i < 6; i++) {
//                    distinct = false;
//                    picked[i] = r.nextInt(50);
//                    while (!distinct) {
//                        distinct = true;
//                        for (int j = 0; j < i; j++) {
//                            if (picked[i] == picked[j]) {
//                                distinct = false;
//                                picked[i] = r.nextInt(50);
//                            }
//                        }
//                    }
//                }
//                for (int i = 0; i < 6; i++) {
//                    Log.d(DEBUG_TAG, "" + picked[i]);
//                    cursor.moveToPosition(picked[i]);
//                    // get all attribute values of this job lead
//                    columnIndex = cursor.getColumnIndex(CountriesDBHelper.QUIZZES_COLUMN_QUIZ_ID);
//                    long id = cursor.getLong(columnIndex);
//                    columnIndex = cursor.getColumnIndex(CountriesDBHelper.QUIZ_COLUMN_QUESTION);
//                    String question = cursor.getString(columnIndex);
//                    columnIndex = cursor.getColumnIndex(CountriesDBHelper.QUIZ_COLUMN_ANSWER);
//                    String answer = cursor.getString(columnIndex);
//                    columnIndex = cursor.getColumnIndex(CountriesDBHelper.QUIZ_COLUMN_XANSWER1);
//                    String xAnswer1 = cursor.getString(columnIndex);
//                    columnIndex = cursor.getColumnIndex(CountriesDBHelpeR.QUIZ_COLUMN_XANSWER2);
//                    String xAnswer2 = cursor.getString(columnIndex);
//
//                    // create a new JobLead object and set its state to the retrieved values
//                    Quiz q = new Quiz(question, answer, xAnswer1, xAnswer2);
//                    q.setId(id); // set the id (the primary key) of this object
//                    // add it to the list
//                    quizzes.add(q);
//                    Log.d(DEBUG_TAG, "Quiz loaded: " + q.getQuestion());
//                }
//            }
//        } catch (Exception e) {
//            Log.d(DEBUG_TAG, "Exception caught: " + e);
//        } finally {
//            // we should close the cursor
//            if (cursor != null) {
//                cursor.close();
//            }
//        }
////        Log.d(DEBUG_TAG, String.valueOf(quizzes));
//        quiz = new ArrayList<>(quizzes);
//        Log.d(DEBUG_TAG, String.valueOf(quiz));
//        return quizzes;
//    }

//Make a method to update the Quizzes table
//    public void addQuizResult(Integer quiz_id, String quiz_date, String quiz_result) {
//        // on below line we are creating a variable for
//        // our sqlite database and calling writable method
//        // as we are writing data in our database.
//        SQLiteDatabase db = countriesDBHelper.getWritableDatabase();
//
//        // on below line we are creating a
//        // variable for content values.
//        ContentValues values = new ContentValues();
//
//        // on below line we are passing all values
//        // along with its key and value pair.
//        values.put(countriesDBHelper.QUIZZES_COLUMN_QUIZ_ID, quiz_id);
//        values.put(countriesDBHelper.QUIZZES_COLUMN_QUIZ_DATE, quiz_date);
//        values.put(countriesDBHelper.QUIZZES_COLUMN_QUIZ_RESULT, quiz_result);
//
//
//        // after adding all values we are passing
//        // content values to our table.
//        db.insert(countriesDBHelper.TABLE_QUIZZES, null, values);
//
//        // at last we are closing our
//        // database after adding database.
//        db.close();
//    } //addQuizResult

//     we have created a new method for reading all the countries
//    public ArrayList<Country> readCountries() {
//        // on below line we are creating a
//        // database for reading our database.
//        SQLiteDatabase db = countriesDBHelper.getReadableDatabase();
//
//        // on below line we are creating a cursor with query to read data from database.
//        Cursor cursorCountries = db.rawQuery("SELECT * FROM " + countriesDBHelper.TABLE_COUNTRY_CONTINENT, null);
//
//        // on below line we are creating a new array list.
//        ArrayList<Country> countriesArrayList = new ArrayList<Country>();
//
//        // moving our cursor to first position.
//        if (cursorCountries.moveToFirst()) {
//            do {
//                // on below line we are adding the data from cursor to our array list.
//                // This creates a new Country Object and adds it to the array list
//                countriesArrayList.add(new Country(cursorCountries.getString(1), //reads country
//                        cursorCountries.getString(2))); //reads continent
//                // cursorCountries.getString(3))); //reads id
//            } while (cursorCountries.moveToNext());
//            // moving our cursor to next.
//        }
//        // at last closing our cursor
//        // and returning our array list.
//        cursorCountries.close();
//        return countriesArray = countriesArrayList;
//    }
//}